rang <- seq(min(y1[,1]),max(y1[,1]),length.out=500)
thresh <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.01))]
gg <- gg + geom_vline(xintercept=thresh) + geom_text(aes(x=thresh,y=input$samplesize/10,label="FDR 0.01"),hjust=0,vjust=1)
thresh2 <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.001))]
gg <- gg + geom_vline(xintercept=thresh2,colour=2) + geom_text(aes(x=thresh2,y=input$samplesize/20,label="FDR 0.001"),colour=2,hjust=0,vjust=0)
print(gg)
thresh <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.01))]
gg <- gg + geom_vline(xintercept=thresh) + geom_text(aes(x=thresh,y=input$samplesize/10,label="FDR 0.01"),hjust=0,vjust=1)
thresh2 <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.001))]
gg <- gg + geom_vline(xintercept=thresh2,colour=2) + geom_text(aes(x=thresh2,y=input$samplesize/20,label="FDR 0.001"),colour=2,hjust=0,vjust=0)
print(gg)
thresh
y1 <- data.frame(score=rnorm(input$samplesize,0,1))
y2 <- data.frame(score=rnorm(input$samplesize,0,1)+input$qual/10*abs(rnorm(input$samplesize,1,1)))
y1$database <- "decoy"
y2$database <- "target"
y <- rbind(y1,y2)
gg <- ggplot(y, aes(x=score, fill=database),environment=environment()) + geom_histogram(alpha = 0.5, aes(y = ..count..),binwidth=0.5, position = 'identity')
c1 <- ecdf(y1[,1])
c2 <- ecdf(y2[,1])
rang <- seq(min(y1[,1]),max(y1[,1]),length.out=200)
thresh1 <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.01))]
gg <- gg + geom_vline(xintercept=thresh1) + geom_text(aes(x=thresh1,y=input$samplesize/10,label="FDR 0.01"),hjust=0,vjust=1)
thresh2 <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.001))]
gg <- gg + geom_vline(xintercept=thresh2,colour=2) + geom_text(aes(x=thresh2,y=input$samplesize/20,label="FDR 0.001"),colour=2,hjust=0,vjust=0)
print(gg)
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
?renderPlot
?plotOutput
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
?renderPlot
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
library(shiny)
shiny::runApp('/srv/shiny-server/shiny-demos/linreg')
shiny::runApp('/srv/shiny-server/shiny-demos/poisreg')
shiny::runApp('/srv/shiny-server/shiny-demos/poisreg')
plot(dnorm,xlim=c(-2,2)
)
plot(dnorm,xlim=c(-4,4))
plot(dnorm,xlim=c(-4,4),xlab="Normal distribution")
abline(v=sd(-1,1),col=2)
abline(v=0,col=3)
text(-2,0.2,"standard deviation",col=2)
text(-0.5,0.2,"mean",col=3)
plot(dnorm,xlim=c(-4,4),xlab="Normal distribution")
abline(v=c(-1,1),col=2)
abline(v=0,col=3)
text(-2,0.2,"standard deviation",col=2)
text(-0.5,0.2,"mean",col=3)
text(-0.5,0.3,"mean",col=3)
plot(dnorm,xlim=c(-4,4),xlab="Normal distribution")
abline(v=c(-1,1),col=2)
abline(v=0,col=3)
text(-1.5,0.2,"standard\ndeviation",col=2)
text(-0.5,0.3,"mean",col=3)
text(-1.7,0.2,"standard\ndeviation",col=2)
plot(dnorm,xlim=c(-4,4),xlab="Normal distribution")
abline(v=c(-1,1),col=2)
abline(v=0,col=3)
text(-1.7,0.2,"standard\ndeviation",col=2)
text(-0.5,0.25,"mean",col=3)
plot(dnorm,xlim=c(-4,4),xlab="Normal distribution")
plot(dnorm,xlim=c(-4,4),ylab="Normal distribution")
abline(v=c(-1,1),col=2)
abline(v=0,col=3)
text(-1.7,0.2,"standard\ndeviation",col=2)
text(-0.5,0.25,"mean",col=3)
sd(dlnorm)
plot(dlnorm,xlim=c(0,10),ylab="Log-normal distribution")
abline(v=exp(0.5),col=2)
mean(rlnorm(100))
mean(rlnorm(1000))
mean(rlnorm(10000))
exp(0.5)
abline(v=sqrt((exp(0.5)-1)*exp(0.5)),col=2)
abline(v=exp(0.5),col=3)
legend("upper right",legend=c("mean","standard\ndeviation",col=c(3,2))
)
legend("upper right",legend=c("mean","standard\ndeviation"),col=c(3,2))
legend("topright",legend=c("mean","standard\ndeviation"),col=c(3,2))
legend("topright",legend=c("mean","standard\ndeviation"),col=c(3,2),lty=1)
plot(dlnorm,xlim=c(0,10),ylab="Log-normal distribution")
abline(v=exp(0.5)+c(-1,1)*sqrt((exp(0.5)-1)*exp(0.5)),col=2)
abline(v=exp(0.5),col=3)
plot(dnorm,xlim=c(-4,4),ylab="Normal distribution")
abline(v=c(-1,1),col=2)
abline(v=0,col=3)
legend("topright",legend=c("mean","standard\ndeviation"),col=c(3,2),lty=1)
plot(dlnorm,xlim=c(0,10),ylab="Log-normal distribution")
abline(v=exp(0.5)+c(-1,1)*sqrt((exp(0.5)-1)*exp(0.5)),col=2)
abline(v=exp(0.5),col=3)
legend("topright",legend=c("mean","standard\ndeviation"),col=c(3,2),lty=1)
plot(dpois,xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois,1,xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois,lambda=1,xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois(,lambda=1),,xlim=c(0,10),ylab="Log-normal distribution")
x <- seq(0,4,0.01)
plot(dpois(x,lambda=1),xlim=c(0,10),ylab="Log-normal distribution")
x <- seq(0,4,0.01)
plot(dpois(x,lambda=4),xlim=c(0,10),ylab="Log-normal distribution")
x <- seq(0,1,0.01)
plot(dpois(x,lambda=4),xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois(x,lambda=0.5),xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois(x,lambda=100),xlim=c(0,10),ylab="Log-normal distribution")
x <- seq(0,100,1)
plot(dpois(x,lambda=100),xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois(x,lambda=0.01),xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois(x,lambda=12),xlim=c(0,10),ylab="Log-normal distribution")
plot(x,dpois(x,lambda=12),xlim=c(0,10),ylab="Log-normal distribution")
plot(x,dpois(x,lambda=2),xlim=c(0,10),ylab="Log-normal distribution")
x <- seq(0,100,0.1)
plot(x,dpois(x,lambda=2),xlim=c(0,10),ylab="Log-normal distribution")
x <- seq(0,100,1)
plot(x,dpois(x,lambda=2),xlim=c(0,10),ylab="Log-normal distribution")
plot(x,dpois(x,lambda=3),xlim=c(0,10),ylab="Log-normal distribution")
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="s",ylab="Log-normal distribution")
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="h",ylab="Log-normal distribution")
x <- seq(0,100,1)
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="h",ylab="Poisson distribution")
abline(v=sqrt(3),col=2)
abline(v=3,col=3)
legend("topright",legend=c("mean","standard\ndeviation"),col=c(3,2),lty=1)
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="h",ylab="Poisson distribution")
abline(v=sqrt(3),col=2)
abline(v=c(0,6),col=3)
abline(v=3+c(-1,1)*sqrt(3),col=2)
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="h",ylab="Poisson distribution")
abline(v=3+c(-1,1)*sqrt(3),col=2)
abline(v=3,col=3)
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="h",ylab="Poisson distribution",lwd=2)
abline(v=3+c(-1,1)*sqrt(3),col=2)
abline(v=3,col=3)
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="h",ylab="Poisson distribution",lwd=3)
abline(v=3+c(-1,1)*sqrt(3),col=2)
abline(v=3,col=3)
legend("topright",legend=c("mean","standard\ndeviation"),col=c(3,2),lty=1)
plot(dbinom,xlim=c(0,10),ylab="Binomial distribution")
plot(dbinom(x,2),xlim=c(0,10),ylab="Binomial distribution")
plot(dbinom(x,0.7,20),xlim=c(0,10),ylab="Binomial distribution")
plot(x,dbinom(x,0.7,20),xlim=c(0,10),ylab="Binomial distribution")
?dbinom
plot(x,dbinom(x,20,0.7),xlim=c(0,10),ylab="Binomial distribution")
plot(x,dbinom(x,10,0.7),xlim=c(0,10),ylab="Binomial distribution")
x <- seq(0,100,0.1)
plot(x,dbinom(x,10,0.7),xlim=c(0,10),ylab="Binomial distribution")
x <- seq(0,100,1)
plot(x,dbinom(x,10,0.7),xlim=c(0,10),ylab="Binomial distribution")
plot(x,dbinom(x,10,0.7),xlim=c(0,12),ylab="Binomial distribution")
plot(x,dbinom(x,10,0.7),xlim=c(0,12),ylab="Binomial distribution",lwd=3,type="h")
abline(v=7,col=3)
abline(v=7+c(-1,1)*sqrt(7*0.3),col=2)
plot(runif,xlim=c(0,12),ylab="Binomial distribution",lwd=3,type="h")
plot(dunif,xlim=c(0,12),ylab="Binomial distribution",lwd=3,type="h")
plot(dunif,xlim=c(0,12),ylab="Binomial distribution")
plot(dunif,xlim=c(-1.5,1.5),ylab="Binomial distribution")
plot(dunif,xlim=c(-0.5,1.5),ylab="Binomial distribution")
abline(v=0.5+c(-1,1)/12,col=2)
abline(v=0.5,col=3)
sd(runif(1000))
sd(runif(10000))
sd(runif(10000))*12
sd(runif(10000))*sqrt(12)
abline(v=0.5+c(-1,1)/sqrt(12),col=2)
library(clusterProfiler)
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/FuzzyCMeansVarM')
library(rJava)
david <- DAVIDWebService$new(email = david.user,url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
library(RDAVIDWebService)
david <- DAVIDWebService$new(email = david.user,url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = veits@bmb.sdu.dk,url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
library(venneuler)
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/FuzzyCMeansVarM')
A <- read.csv("/tmp/01_Input_Filtered_data_Quantifiable_limma.csv")
head(A)
dim(A[complete.cases(A),])
t(A[complete.cases(A),]))
t(A[complete.cases(A),])
nrow(t(A[complete.cases(A),]))
ncol(t(A[complete.cases(A),]))
runApp('devel/Proteomics/DataAnalysis/ShinyApps/FuzzyCMeansVarMdev')
A <- read.csv("/tmp/test.csv")
names(A)
plot(r_u~ Accs + Pep, data=A)
plot(r_u~ Accs + Pep, data=A,las=2)
plot(r_u~ Accs + Pep, data=A)
plot(log(r_u)~ Accs + Pep, data=A)
plot(log(r_m)~ Accs + Pep, data=A)
plot(log(r_)~ Accs + Pep, data=A)
plot(log(r_)~ Accs + Pep, data=A)
plot(log(r)~ Accs + Pep, data=A)
886*12
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
abs(c(1,1)-c(2,-2))
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/DRFMulti')
plot(c(1,-1,-1,1)+rnorm(4))
plot(c(1,-1,-1,1)+rnorm(4))
plot(c(1,-1,-1,1)+rnorm(4))
plot(c(1,-1,-1,1)+rnorm(4))
plot(c(1,-1,-1,1)+rnorm(4,0,0.5))
plot(c(1,-1,-1,1)+rnorm(4,0,0.5))
plot(c(1,-1,-1,1)+rnorm(4,0,0.5))
plot(c(1,-1,-1,1)+rnorm(4,0,0.5))
plot(c(1,-1,-1,1)+rnorm(4,0,0.5))
plot(c(1,-1,-1,1)+rnorm(4,0,0.5))
plotCI(1:(NumCond-1)+runif(1,-0.1,0.1),SubSet[1,1:(NumCond-1),drop=F],pch=16,xlab="Conditions",ylab="log-ratios",col=rainbow(nrow(SubSet))[1],
uiw=qvalues$Sds[input$stat_table_rows_selected][1],type="b",barcol="#000000FF",
ylim=range(LogRatios,na.rm=T),xaxt="none")
plotCI(1:4,rep(c(-1,1,1,-1),5)*rnorm(20,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios")
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
rnorm(4,0,0.5)
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
rnorm(4,0,0.5)
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.5))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.25))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.25))
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.25))
getwd()
pdf("t.pdf")
plotCI(1:4,c(-1,1,1,-1)*rnorm(4,0,0.5),pch=16,xlab="Conditions",ylab="log-ratios",uiw=rnorm(4,0,0.25))
dev.off()
A <- read.csv("~/devel/Proteomics/FuzzyCMeansVarM/MetaboMycobacteria/NormedFCMVarMResultsCentroids2017-02-17.csv")
head(A)
A <- read.csv("~/devel/Proteomics/FuzzyCMeansVarM/MetaboMycobacteria/NormedFCMVarMResultsCentroids2017-02-17.csv",row.names=1)
plot(A)
plot(t(A))
plot(A[1,]
)
plot(t(A[1,]))
plot(t(A[2,]))
plot(t(A[3,]))
plot(t(A[4,]))
plot(t(A[5,]))
plot(t(A[6,]))
for (i in 1:nrow(A))
lines(t(A[i,]))
par(mfrow=c(3,5))
for (i in 1:nrow(A))
plot(t(A[i,]),lwd=2)
par(mfrow=c(3,5))
for (i in 1:nrow(A))
plot(t(A[i,]),lwd=2,type=l)
plot(t(A[i,]),lwd=2,type='l')
par(mfrow=c(3,5))
for (i in 1:nrow(A))
plot(t(A[i,]),lwd=2,type='l')
pdf("/tmp/t.pdf",heigth=10,width=18)
pdf("/tmp/t.pdf",height=10,width=18)
par(mfrow=c(3,5))
plot(t(A[i,]),lwd=2,type='l')
dev.off
dev.off()
pdf("/tmp/t.pdf",height=10,width=18)
par(mfrow=c(3,5))
for (i in 1:nrow(A))
plot(t(A[i,]),lwd=2,type='l')
dev.off()
########## Import of Bioconductor tools to bio.tools
## Issues:
## 1) biocViews are not being used or mapped to EDAM. Manual annotation so far
## 2) Authors do not have email adresses but "maintainers" do, therefore difficult to distinguish contacts from maintainers or contributors
## 3) Only one data per input/output allowed. Problem when multiple data and format terms -> all format terms for each data term
## 4) Short description sometimes too short -> added (R package) at the end
## 5) Terms which are not in EDAM, typos or in wrong category
## 6) * Duplicated terms: operation_3223;operation_3742 operation_3352;operation_3353: temporarily deleted
## 7) * wrong terms (e.g. operation instead of topic) -> manually corrected
library(biocViews)
library(graph)
library(XML)
library(ontologyIndex)
############### get recent EDAM ontology for mapping of terms
system("wget http://edamontology.org/EDAM.owl")
EDAM <- get_OWL("EDAM.owl")
## Remove obsolete terms
EDAM$id <- EDAM$id[!EDAM$obsolete]
EDAM$name <- EDAM$name[!EDAM$obsolete]
EDAM$parents <- EDAM$parents[!EDAM$obsolete]
EDAM$children <- EDAM$children[!EDAM$obsolete]
EDAM$ancestors <- EDAM$ancestors[!EDAM$obsolete]
EDAM$obsolete <- EDAM$obsolete[!EDAM$obsolete]
########  TEMPORARILY DELETING DULICATED TERMS
EDAM$name[which(EDAM$id == "http://edamontology.org/operation_3742")] <- ""
EDAM$name[which(EDAM$id == "http://edamontology.org/operation_3353")] <- ""
#################################################
#Get biocViews:
example(getBiocViews)
# names: upper view -> lower views
A <- edges(biocViewsVocab)
outViews <- NULL
for (i in names(A)) {
if (length(A[[i]])>0)
outViews <- rbind(outViews,cbind(A[[i]],i))
}
write.csv(outViews,"allViews.csv")
# get views and packages:
# annotations
repos <- "http://bioconductor.org/packages/release/data/annotation"
bv <- getBiocViews(repos, biocViewsVocab, "NoViewProvided")
# access description of package:
bv[[5]]@packageList[1]
pckOut <- NULL
pcks <- bv$AnnotationData@packageList
slots <- c("Title","Description","Version","Author","Maintainer","Depends","Imports","SystemRequirements",
"License","URL","biocViews","source.ver","manuals","reposFullUrl","functionIndex")
for ( i in names(pcks)) {
ttt <- i
for (j in slots) {
ttt <- append(ttt,paste(slot(pcks[[i]],j),collapse="|"))
}
pckOut <- rbind(pckOut, ttt)
}
colnames(pckOut) <- c("Name",slots)
rownames(pckOut) <- 1:nrow(pckOut)
write.csv(pckOut,"Annotations.csv")
Annotations <- pckOut
# experimental data
repos <- "http://bioconductor.org/packages/release/data/experiment"
bv <- getBiocViews(repos, biocViewsVocab, "NoViewProvided")
pckOut <- NULL
pcks <- bv$ExperimentData@packageList
slots <- c("Title","Description","Version","Author","Maintainer","Depends","Imports","SystemRequirements",
"License","URL","biocViews","source.ver","manuals","reposFullUrl","functionIndex")
for ( i in names(pcks)) {
ttt <- i
for (j in slots) {
ttt <- append(ttt,paste(slot(pcks[[i]],j),collapse="|"))
}
pckOut <- rbind(pckOut, ttt)
}
colnames(pckOut) <- c("Name",slots)
rownames(pckOut) <- 1:nrow(pckOut)
write.csv(pckOut,"ExperimentData.csv")
Experiments <- pckOut
# software
repos <- "http://bioconductor.org/packages/release/bioc"
bv <- getBiocViews(repos, biocViewsVocab, "NoViewProvided")
pckOut <- NULL
pcks <- bv$Software@packageList
slots <- c("Title","Description","Version","Author","Maintainer","Depends","Imports","SystemRequirements",
"License","URL","biocViews","source.ver","manuals","reposFullUrl","functionIndex")
for ( i in names(pcks)) {
ttt <- i
for (j in slots) {
ttt <- append(ttt,paste(slot(pcks[[i]],j),collapse="|"))
}
pckOut <- rbind(pckOut, ttt)
}
colnames(pckOut) <- c("Name",slots)
rownames(pckOut) <- 1:nrow(pckOut)
write.csv(pckOut,"Software.csv")
Software <- pckOut
############## For now, only software tools
# FullPcks <- rbind(Annotations,Experiments,Software)
FullPcks <- Software
# Add EDAM mappings STILL NEEDED?
EDAMmaps <- read.csv("EDAM Mappings - BioConductor Version 1.csv",row.names=2)
map_terms <- function(tool) {
views <- strsplit(tool["biocViews"],"\\|")
tEDAM <- NULL
for (i in views) {
tEDAM <- rbind(tEDAM,EDAMmaps[i,])
}
# tEDAM
out <- apply(tEDAM,2,paste,collapse="|")
out
}
length(map_terms(FullPcks[2,]))
ttt <- t(apply(FullPcks,1,map_terms))
FullPcks <- cbind(FullPcks,ttt)
## add manual annotations
ManualAnnotations <- read.csv("BioconductorAnnotations.csv",skip=3,row.names=1)
colnames(ManualAnnotations)
write.csv(FullPcks,"FullBioconductor.csv")
tPcks <- cbind(FullPcks[,c("Name","Title","Description","biocViews")],paste(FullPcks[,"reposFullUrl"],"/html/",FullPcks[,"Name"],".html",sep=""),
FullPcks[,c("Category","Term.1","URI","Term.2","URI.1")])
write.csv(tPcks,"FullBioconductorForCuration.csv",row.names=F)
# convert licenses to SPDX License List
FullPcks <- data.frame(FullPcks,stringsAsFactors = F)
FullPcks$License <- gsub(" \\+ file LICENSE","",FullPcks$License)
FullPcks$License <- gsub(" \\+ file LICENCE","",FullPcks$License)
FullPcks$License <- gsub(" \\| file LICENSE","",FullPcks$License)
FullPcks$License <- gsub("file LICENSE","",FullPcks$License)
FullPcks$License <- gsub("Unlimited","",FullPcks$License)
FullPcks[grep("LGPL.*3.*",FullPcks$License),"License"] <- "LGPL-3.0"
FullPcks[grep("LGPL.*2\\.1.*",FullPcks$License),"License"] <- "LGPL-2.1"
FullPcks[grep("LGPL.*2.*",FullPcks$License),"License"] <- "LGPL-2.0"
FullPcks[grep("GPL.*3.*",FullPcks$License),"License"] <- "GPL-3.0"
FullPcks[grep("GPL.*2.*",FullPcks$License),"License"] <- "GPL-2.0"
FullPcks[grep("GPL.*gnu.*",FullPcks$License),"License"] <- "GPL-3.0"
FullPcks[grep("Artistic.*2.*",FullPcks$License),"License"] <- "Artistic-2.0"
FullPcks[grep("Apache.*2.*",FullPcks$License),"License"] <- "Apache-2.0"
FullPcks[grep("EPL",FullPcks$License),"License"] <- "EPL-1.0"
FullPcks[grep("CPL",FullPcks$License),"License"] <- "CPL-1.0"
FullPcks[grep("CeCILL",FullPcks$License),"License"] <- "CECILL-2.1"
FullPcks[grep("BSD",FullPcks$License),"License"] <- "BSD-4-Clause"
FullPcks[grep("BSD_2_clause",FullPcks$License),"License"] <- "BSD-2-Clause"
FullPcks[grep("BSD_3_clause",FullPcks$License),"License"] <- "BSD-3-Clause"
FullPcks[grep("CC BY-NC-SA 4.0",FullPcks$License),"License"] <- "CC-BY-NC-SA-4.0"
FullPcks[grep("CC BY-NC-ND 4.0",FullPcks$License),"License"] <- "CC-BY-NC-ND-4.0"
FullPcks[grep("CC BY-NC 4.0",FullPcks$License),"License"] <- "CC-BY-NC-4.0"
FullPcks[FullPcks$License == "GPL","License"] <- "GPL-3.0"
FullPcks[FullPcks$License == "LGPL","License"] <- "LGPL-3.0"
sort(names(table(FullPcks$License)))
EDAMTypos <- NULL
writeEDAMformat <- function (parentnode, terms){
if (is.na(terms)) {
tnode4 <- newXMLNode("format",parent=parentnode)
alt_name <- "http://edamontology.org/format_1915"
newXMLNode("uri",parent=tnode4, alt_name)
newXMLNode("term",parent=tnode4, EDAM$name[alt_name])
} else {
edam_list <- strsplit(as.character(terms), "[;]")
for (e in unlist(edam_list)) {
e <- gsub("^\\s+|\\s+$", "", e)
edam_name <- grep("format",names(which(e == EDAM$name )),value=T)
if (length(edam_name)>0) {
if (nchar(e) <= 1) {
EDAMTypos <<- rbind(EDAMTypos, c(currTool$Name,e))
} else {
tnode4 <- newXMLNode("format",parent=parentnode)
newXMLNode("uri",parent=tnode4,edam_name)
newXMLNode("term",parent=tnode4,e)
}
}
}
}
}
names(FullPcks)
rownames(FullPcks)
names(FullPcks)
names(FullPcks[1,"Name"])
(FullPcks[1,"Name"])
i <- 2
currTool <- FullPcks[i,]
tnode <- newXMLNode("tool",parent=xml_out)
tnode2 <- newXMLNode("summary",parent=tnode)
papers <- htmlTreeParse(paste("http://bioconductor.org/packages/release/bioc/citations/",curTool["Name"],"/citation.html",sep=""))
papers <- htmlTreeParse(paste("http://bioconductor.org/packages/release/bioc/citations/",currTool["Name"],"/citation.html",sep=""))
papers
papers$children
papers$children[[1]]
papers <- htmlTree(paste("http://bioconductor.org/packages/release/bioc/citations/",currTool["Name"],"/citation.html",sep=""))
papers <- htmlParse(paste("http://bioconductor.org/packages/release/bioc/citations/",currTool["Name"],"/citation.html",sep=""))
papers
papers <- htmlTreeParse(paste("http://bioconductor.org/packages/release/bioc/citations/",currTool["Name"],"/citation.html",sep=""))
papers
papers <- htmlParse(paste("http://bioconductor.org/packages/release/bioc/citations/",currTool["Name"],"/citation.html",sep=""))
papers
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/VSClustTmp')
librar(rJava)
library(rJava)
library(rJava)
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/VSClustTmp')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/VSClustTmp')
runApp('devel/Proteomics/DataAnalysis/ShinyApps/VSClustTmp')
library(tidyr)
library(tidyr)
library(tidyr)
library(tidyr)
runApp('devel/Proteomics/DataAnalysis/ShinyApps/VSClustTmp')
