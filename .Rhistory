# access description of package:
bv[[5]]@packageList[1]
pckOut <- NULL
pcks <- bv$AnnotationData@packageList
slots <- c("Title","Description","Version","Author","Maintainer","Depends","Imports","SystemRequirements",
"License","URL","biocViews","source.ver","manuals","reposFullUrl","functionIndex")
for ( i in names(pcks)) {
ttt <- i
for (j in slots) {
ttt <- append(ttt,paste(slot(pcks[[i]],j),collapse="|"))
}
pckOut <- rbind(pckOut, ttt)
}
colnames(pckOut) <- c("Name",slots)
rownames(pckOut) <- 1:nrow(pckOut)
write.csv(pckOut,"Annotations.csv")
Annotations <- pckOut
# experimental data
repos <- "http://bioconductor.org/packages/release/data/experiment"
bv <- getBiocViews(repos, biocViewsVocab, "NoViewProvided")
pckOut <- NULL
pcks <- bv$ExperimentData@packageList
slots <- c("Title","Description","Version","Author","Maintainer","Depends","Imports","SystemRequirements",
"License","URL","biocViews","source.ver","manuals","reposFullUrl","functionIndex")
for ( i in names(pcks)) {
ttt <- i
for (j in slots) {
ttt <- append(ttt,paste(slot(pcks[[i]],j),collapse="|"))
}
pckOut <- rbind(pckOut, ttt)
}
colnames(pckOut) <- c("Name",slots)
rownames(pckOut) <- 1:nrow(pckOut)
write.csv(pckOut,"ExperimentData.csv")
Experiments <- pckOut
# software
repos <- "http://bioconductor.org/packages/release/bioc"
bv <- getBiocViews(repos, biocViewsVocab, "NoViewProvided")
pckOut <- NULL
pcks <- bv$Software@packageList
slots <- c("Title","Description","Version","Author","Maintainer","Depends","Imports","SystemRequirements",
"License","URL","biocViews","source.ver","manuals","reposFullUrl","functionIndex")
for ( i in names(pcks)) {
ttt <- i
for (j in slots) {
ttt <- append(ttt,paste(slot(pcks[[i]],j),collapse="|"))
}
pckOut <- rbind(pckOut, ttt)
}
colnames(pckOut) <- c("Name",slots)
rownames(pckOut) <- 1:nrow(pckOut)
write.csv(pckOut,"Software.csv")
Software <- pckOut
############## For now, only software tools
# FullPcks <- rbind(Annotations,Experiments,Software)
FullPcks <- Software
# Add EDAM mappings STILL NEEDED?
EDAMmaps <- read.csv("EDAM Mappings - BioConductor Version 1.csv",row.names=2)
map_terms <- function(tool) {
views <- strsplit(tool["biocViews"],"\\|")
tEDAM <- NULL
for (i in views) {
tEDAM <- rbind(tEDAM,EDAMmaps[i,])
}
# tEDAM
out <- apply(tEDAM,2,paste,collapse="|")
out
}
length(map_terms(FullPcks[2,]))
ttt <- t(apply(FullPcks,1,map_terms))
FullPcks <- cbind(FullPcks,ttt)
## add manual annotations
ManualAnnotations <- read.csv("BioconductorAnnotations.csv",skip=3,row.names=1)
colnames(ManualAnnotations)
write.csv(FullPcks,"FullBioconductor.csv")
tPcks <- cbind(FullPcks[,c("Name","Title","Description","biocViews")],paste(FullPcks[,"reposFullUrl"],"/html/",FullPcks[,"Name"],".html",sep=""),
FullPcks[,c("Category","Term.1","URI","Term.2","URI.1")])
write.csv(tPcks,"FullBioconductorForCuration.csv",row.names=F)
# convert licenses to SPDX License List
FullPcks <- data.frame(FullPcks,stringsAsFactors = F)
FullPcks$License <- gsub(" \\+ file LICENSE","",FullPcks$License)
FullPcks$License <- gsub(" \\+ file LICENCE","",FullPcks$License)
FullPcks$License <- gsub(" \\| file LICENSE","",FullPcks$License)
FullPcks$License <- gsub("file LICENSE","",FullPcks$License)
FullPcks$License <- gsub("Unlimited","",FullPcks$License)
FullPcks[grep("LGPL.*3.*",FullPcks$License),"License"] <- "LGPL-3.0"
FullPcks[grep("LGPL.*2\\.1.*",FullPcks$License),"License"] <- "LGPL-2.1"
FullPcks[grep("LGPL.*2.*",FullPcks$License),"License"] <- "LGPL-2.0"
FullPcks[grep("GPL.*3.*",FullPcks$License),"License"] <- "GPL-3.0"
FullPcks[grep("GPL.*2.*",FullPcks$License),"License"] <- "GPL-2.0"
FullPcks[grep("GPL.*gnu.*",FullPcks$License),"License"] <- "GPL-3.0"
FullPcks[grep("Artistic.*2.*",FullPcks$License),"License"] <- "Artistic-2.0"
FullPcks[grep("Apache.*2.*",FullPcks$License),"License"] <- "Apache-2.0"
FullPcks[grep("EPL",FullPcks$License),"License"] <- "EPL-1.0"
FullPcks[grep("CPL",FullPcks$License),"License"] <- "CPL-1.0"
FullPcks[grep("CeCILL",FullPcks$License),"License"] <- "CECILL-2.1"
FullPcks[grep("BSD",FullPcks$License),"License"] <- "BSD-4-Clause"
FullPcks[grep("BSD_2_clause",FullPcks$License),"License"] <- "BSD-2-Clause"
FullPcks[grep("BSD_3_clause",FullPcks$License),"License"] <- "BSD-3-Clause"
FullPcks[grep("CC BY-NC-SA 4.0",FullPcks$License),"License"] <- "CC-BY-NC-SA-4.0"
FullPcks[grep("CC BY-NC-ND 4.0",FullPcks$License),"License"] <- "CC-BY-NC-ND-4.0"
FullPcks[grep("CC BY-NC 4.0",FullPcks$License),"License"] <- "CC-BY-NC-4.0"
FullPcks[FullPcks$License == "GPL","License"] <- "GPL-3.0"
FullPcks[FullPcks$License == "LGPL","License"] <- "LGPL-3.0"
sort(names(table(FullPcks$License)))
EDAMTypos <- NULL
writeEDAMformat <- function (parentnode, terms){
if (is.na(terms)) {
tnode4 <- newXMLNode("format",parent=parentnode)
alt_name <- "http://edamontology.org/format_1915"
newXMLNode("uri",parent=tnode4, alt_name)
newXMLNode("term",parent=tnode4, EDAM$name[alt_name])
} else {
edam_list <- strsplit(as.character(terms), "[;]")
for (e in unlist(edam_list)) {
e <- gsub("^\\s+|\\s+$", "", e)
edam_name <- grep("format",names(which(e == EDAM$name )),value=T)
if (length(edam_name)>0) {
if (nchar(e) <= 1) {
EDAMTypos <<- rbind(EDAMTypos, c(currTool$Name,e))
} else {
tnode4 <- newXMLNode("format",parent=parentnode)
newXMLNode("uri",parent=tnode4,edam_name)
newXMLNode("term",parent=tnode4,e)
}
}
}
}
}
names(FullPcks)
rownames(FullPcks)
names(FullPcks)
names(FullPcks[1,"Name"])
(FullPcks[1,"Name"])
i <- 2
currTool <- FullPcks[i,]
tnode <- newXMLNode("tool",parent=xml_out)
tnode2 <- newXMLNode("summary",parent=tnode)
papers <- htmlTreeParse(paste("http://bioconductor.org/packages/release/bioc/citations/",curTool["Name"],"/citation.html",sep=""))
papers <- htmlTreeParse(paste("http://bioconductor.org/packages/release/bioc/citations/",currTool["Name"],"/citation.html",sep=""))
papers
papers$children
papers$children[[1]]
papers <- htmlTree(paste("http://bioconductor.org/packages/release/bioc/citations/",currTool["Name"],"/citation.html",sep=""))
papers <- htmlParse(paste("http://bioconductor.org/packages/release/bioc/citations/",currTool["Name"],"/citation.html",sep=""))
papers
papers <- htmlTreeParse(paste("http://bioconductor.org/packages/release/bioc/citations/",currTool["Name"],"/citation.html",sep=""))
papers
papers <- htmlParse(paste("http://bioconductor.org/packages/release/bioc/citations/",currTool["Name"],"/citation.html",sep=""))
papers
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/VSClustTmp')
librar(rJava)
library(rJava)
library(rJava)
library(rJava)
system("R CMD javareconf")
system("sudo R CMD javareconf")
library(rJava)
library(GA)
library(matrixStats)
library(venneuler)
## TODO Clean accession numbers better and separate ()?
library(matrixStats)
library(Mfuzz)
shiny::runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/VSClustTmp')
filename <- "/tmp/F267099.csv"
proteoformquant <- read.csv(filename)
names(proteoformquant)
filename <- "/tmp/F276444_quant.csv"
proteoformquant <- read.csv(filename)
names(proteoformquant)
library(stringr)
str_extract("[A_Z][0-9]*",proteoformquant$AccessionNumber)
proteoformquant <- read.csv(filename, stringsAsFactors = F)
names(proteoformquant)
str_extract("[A_Z][0-9]*",proteoformquant$AccessionNumber)
proteoformquant$AccessionNumber
proteoformquant$Proteoform
proteoformquant$QueryNumber
proteoformquant$ProteinDescription
str_extract("[A_Z][0-9]*",proteoformquant$ProteinDescription)
proteoformquant$ProteinDescription
str_extract("[A-Z][0-9]*",proteoformquant$ProteinDescription)
str_extract("[A-Z],proteoformquant$ProteinDescription)
str_extract("[A-Z]",proteoformquant$ProteinDescription)
str_extract("a","sdfgasdfa")
str_extract(proteoformquant$ProteinDescription,"[A-Z][0-9]*")
PhD course: Deep Learning Summer-course, University of Southern Denmark.
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
shiny::runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
?icon
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/ComplexBrowser')
shiny::runApp('devel/Bioinformatics/DataAnalysis/ShinyApps/VSClustTmp')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
clustout <- ClustComp(exprs(PExpr),NClust=NClust,Sds=dat[rownames(exprs(PExpr)),ncol(dat)],NSs=16, cores)
runApp()
runApp()
runApp()
shiny::runApp()
x <- seq(-10,10,0.01)
y <- dnorm(x)
plot(x, y)
x <- seq(-10,10,0.01)
y <- dnorm(x)
plot(x, y)
plot(x, y, type="l")
plot(x, dlnorm(x), type="l")
plot(x, dgamma(x,1), type="l")
plot(x, dunif(x), type="l")
# other functions
plot(x, pnorm(x))
x2 <- seq(0,1,0.001)
plot(x2, qnorm(x2))
# now with random numbers
r <- rnorm(1000)
plot(r)
hist(r)
hist(r,100,freq=F)
lines(x,dnorm(x))
r <- rnorm(10000)
plot(r)
hist(r)
hist(r,100,freq=F)
lines(x,dnorm(x))
abline(v=mean(r),col=2,lwd=2)
abline(v=median(r),col=3,lwd=2)
abline(v=c(-sd(r),sd(r)),col=3,lwd=2)
## Central limit theorem
clt <- function(func, nsum=10, npoints=100, ...) {
out <- 0
for (i in 1:nsum) {
out <- out+func(npoints, ...)
}
out
}
cc <- clt(runif,nsum=3,npoints=10000)
gene.values <- c(-0.156779906618839, -1.19258492462641, -0.584097898869027,
-1.05973269590046, 0.241034604602436, 0.622092984491641, 0.429889283129897,
1.21134263252275)
rep(c("A","B"), each=4)
plot(rep(c("A","B"), each=4), gene.values)
plot(rep(c("A","B"), each=4), gene.values)
gene.values <- c(-0.156779906618839, -1.19258492462641, -0.584097898869027,
-1.05973269590046, 0.241034604602436, 0.622092984491641, 0.429889283129897,
1.21134263252275)
plot(rep(c("A","B"), each=4), gene.values)
plot(t(rep(c("A","B"), each=4)), gene.values)
plot(rep(c("A","B"), each=4), gene.values)
rep(c("A","B"), each=4)
plot(as.factor(rep(c("A","B"), each=4)), gene.values)
means <- c(mean(gene.values[1:4]), mean(gene.values(5:8)))
means <- c(mean(gene.values[1:4]), mean(gene.values[5:8]))
means
sds <- c(sd(gene.values[1:4]), sd(gene.values[5:8]))
sds
msds <- mean(sds)
msds
t.val <- (means[1] - means[2]) * sqrt(16/8) / msds
t.val
x <- seq(-10,10,0.01)
plot(x, dt(x, df = 6))
abline(v=t.val)
plot(x, dt(x, df = 6), type="l")
abline(v=t.val)
abline(h=0)
pnorm(t.val, df=6)
pt(t.val, df=6)
abline(v=-t.val)
2 * pt(t.val, df=6)
t.test(gene.values[1:4], gene.values[5:8], var.equal = T)
## Two-way Anova, interactions
data(ToothGrowth)
?ToothGrowth
ToothGrowth
sapply(ToothGrowth, class)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
sapply(ToothGrowth, class)
interaction.plot(ToothGrowth$supp,ToothGrowth$dose,ToothGrowth$len)
interaction.plot(ToothGrowth$dose,ToothGrowth$supp,ToothGrowth$len)
lm.out <- lm(len ~ supp + dose, ToothGrowth)
summary(lm.out)
lm.out2 <- lm(len ~ supp * dose, ToothGrowth)
summary(lm.out2)
anova(lm.out, lm.out2)
rep(LETTERS[1:3], each=4)
as.factor(rep(LETTERS[1:3], each=4))
as.numeric(as.factor(rep(LETTERS[1:3], each=4)))
as.numeric(as.factor(rep(c("B","A","C"), each=4)))
as.numeric(as.factor(rep(c("BA","A","C"), each=4)))
as.numeric(as.factor(rep(c("BA","AC","C"), each=4)))
as.numeric(as.factor(rep(c("ABA","AC","C"), each=4)))
x <- seq(0,10, 0.01)
plot(x, cos(x))
acf(cos(x)))
acf(cos(x))
acf(cos(x), lag.max = 100)
acf(cos(x), lag.max = 1000)
acf(cos(x)+rnorm(1001, 0, 0.5), lag.max = 1000)
plot(x, cos(x))
plot(x, cos(x), xlab="z", ylab="cos(z)")
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l")
plot(x, cos(x), xlab="z", ylab="cos(z)", type="h")
plot(x, cos(x), xlab="z", ylab="cos(z)", type="s")
x <- seq(0,10,0.1)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="s")
plot(x, cos(x), xlab="z", ylab="cos(z)", type="h")
plot(x, cos(x), xlab="z", ylab="cos(z)", type="b")
plot(x, cos(x), xlab="z", ylab="cos(z)", type="b", xlim=c(-10,10))
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(-10,10), lwd=1)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col=1)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col=2)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col=3)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col=4)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col=7)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col=8)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col=9)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col="lightred")
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col="darkred")
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col="darkgrey")
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col="#000000")
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col="#000099")
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col="#0000FF")
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col="#0037AA")
lines(x, sin(x), col="#AABB00")
lines(x, sin(x), col="#AABB00", lwd=10)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col="#0037AAFF")
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col="#0037AA67")
lines(x, sin(x), col="#AABB0057", lwd=10)
points(x, exp(x))
points(x, exp(x)-4)
points(x, 0.01*exp(x)-4)
points(x, 0.01*exp(x)-4, pch=15)
x <- seq(0,10,0.1)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col="#0037AA67")
lines(x, sin(x), col="#AABB0057", lwd=10)
points(x, 0.01*exp(x)-4, pch=15)
points(x, 0.01*exp(x)-4, pch=15, cex=5)
points(x, 0.01*exp(x)-4, pch=15, cex=0.1)
x <- seq(0,10,0.1)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col="#0037AA67")
lines(x, sin(x), col="#AABB0057", lwd=10)
points(x, 0.01*exp(x)-4, pch=15, cex=0.1)
points(x, 0.01*exp(x)-4, pch=15, cex=0.2)
x <- seq(0,10,0.1)
plot(x, cos(x), xlab="z", ylab="cos(z)", type="l", xlim=c(0,10), lwd=10, col="#0037AA67")
lines(x, sin(x), col="#AABB0057", lwd=10)
points(x, 0.01*exp(x)-4, pch=15, cex=0.2)
par()
par(lwd=5)
plot(1:10)
par(lwd=1.5)
plot(1:10)
par(fg="red")
plot(1:10)
plot(1:100)
par()
dev.off()
plot(1:10)
par(mfrow=c(2,3))
hist(rexp(1000), freq=i)
par(mfrow=c(2,3))
for(i in 1:6) {
hist(rexp(1000, rate=i))
}
par(mfrow=c(2,3))
for(i in 1:6) {
hist(rexp(1000, rate=i), xlim=c(0,10))
}
plot(1:10)
par(mfrow=c(1,1))
plot(1:10)
circle
plot(0,0, cex=10)
library(Biobase)
data("geneData")
View(geneData)
plot(geneData$A, geneData$B)
plot(geneData[,"A"], geneData[,"B"])
plot(geneData[,"A"], geneData[,"B"], cex=0.2, col="#33333370", pch=16)
plot(geneData[,"A"], geneData[,"B"], cex=0.5, col="#33333370", pch=16)
plot(geneData[,"A"], geneData[,"B"], cex=0.5, col="#33333370", pch=16, log="xy")
pairs(geneData[,1:6])
pairs(geneData[,1:6], cex=0.5, col="#33333370", pch=16, log="xy")
pairs(geneData[,1:20], cex=0.5, col="#33333370", pch=16, log="xy")
par(oma=c(0,0,0,0), mar=c(1,1,1,0.5))
pairs(geneData[,1:20], cex=0.5, col="#33333370", pch=16, log="xy")
par(oma=c(0,0,0,0), mar=c(0,0,0,0))
pairs(geneData[,1:20], cex=0.5, col="#33333370", pch=16, log="xy")
pairs(geneData[,1:10], cex=0.5, col="#33333370", pch=16, log="xy")
image(geneData)
dev.off()
image(geneData)
image(t(geneData))
image(t(log2(geneData)))
contour(t(log2(geneData)))
heatmap(t(log2(geneData)))
heatmap(t((geneData)))
geneData[geneData < 0] <- NA
heatmap(t(log2(geneData)))
rowSums(is.na(geneData))
geneData <- geneData[rowSums(is.na(geneData)) < 10 , ]
heatmap(t(log2(geneData)))
dim(geneData)
heatmap((log2(geneData)))
heatmap(t(log2(geneData)))
plot(x, cos(x))
points(x, cos(x) * 5, col=2)
plot(x, cos(x))
points(x, cos(x) * 0.5, col=2)
plot(x, cos(x)/sd(cos(x)))
points(x, cos(x) * 0.5 / sd(cos(x) * 0.5), col=2)
heatmap(t(log2(geneData)), scale="none")
heatmap(t(log2(geneData)), scale="column")
cor(geneData, use="complete.or.na")
?cor
cor(geneData, use="na.or.complete")
image(correlations)
correlations <- cor(geneData, use="na.or.complete")
image(correlations)
levelplot(correlations)
gplot::levelplot(correlations)
gplots::levelplot(correlations)
lattice::levelplot(correlations)
heatmap(correlations)
heatmap(correlations, scale="none")
random.data <- rnorm(100000)
hist(random.data)
hist(random.data, 100)
hist(random.data, 100, col="lightgreen")
hist(random.data, 100, col="lightgreen", xlim=c(0,5))
hist(random.data, 100, col="lightgreen"
hist(random.data, 100, col="lightgreen", freq=F)
hist(random.data, 100, col="lightgreen", freq=F)
plot(x, dnorm(x),  type = "l")
hist(random.data, 100, col="lightgreen", freq=F)
lines(x, dnorm(x),  type = "l")
boxplost(random.data)
boxplot(random.data)
hist(random.data, 100, col="#33333370", freq=F)
hist(random.data, 100, col="#33333370", freq=F, border=0)
hist(random.data+1, 100, col="#33333370", freq=F, border=0, add=T)
hist(random.data, 100, col="#33333370", freq=F, border=0, xlim=c(-5,6))
hist(random.data+1, 100, col="#33333370", freq=F, border=0, add=T)
hist(random.data, 100, col="#33333370", freq=F, border=0, xlim=c(-5,6))
hist(random.data+1, 100, col="#3300AA70", freq=F, border=0, add=T)
hist(random.data-1, 100, col="#0033AA70", freq=F, border=0, add=T)
random.data2 <- rnorm(1000000)
qqnorm(random.data)
plot(c(-x,x),dnorm(c(-x,x)))
plot(c(-x,x),dnorm(c(-x,x)), type="l")
plot(c(-x,x),dnorm(c(-x,x)), type="p")
boxplot(random.data)
qqnorm(random.data)
random.data2 <- rexp(1000000)
qqnorm(random.data2)
random.data2 <- rexp(10000)
qqnorm(random.data2)
random.data <- rnorm(100)
hist(random.data)
random.data <- rnorm(100)
hist(random.data)
qqnorm(random.data)
random.data <- rnorm(100)
hist(random.data)
qqnorm(random.data)
random.data <- rnorm(100)
hist(random.data)
qqnorm(random.data)
random.data2 <- rexp(1000)
random.data <- rnorm(1000)
qqplot(random.data2, random.data)
random.data2 <- rexp(1000)
random.data <- rexp(1000)
qqplot(random.data2, random.data)
plot(random.data, rrandom.data2)
plot(random.data, random.data2)
qqplot(random.data2, random.data)
qqplot(rnorm(1000), rlnorm(1000))
pdf("/tmp/t.pdf", weight=10, height=12)
pdf("/tmp/t.pdf", weight=10, height=20)
pdf("/tmp/t.pdf", width=10, height=20)
qqplot(rnorm(1000), rlnorm(1000))
dev.off()
jpeg("/tmp/t.jpeg", width=200, height=200)
qqplot(rnorm(1000), rlnorm(1000))
dev.off()
shiny::runApp()
