par(mfrow=c(1,2))
plot(cbind(paste("Condition", rep(1:2, each=5), "\nreplicate", rep(1:5,each=2)), c(0.1, NA, NA, 0.02, NA, 0.2, 0.1, 0.01, 0.05, 0.2)), ylab="Abundance", ylim=c(0,4))
plot(cbind(paste("Condition", rep(1:2, each=5), "\nreplicate", rep(1:5,each=2)), c(0.1, NA, NA, 0.02, NA, 0.5, 1.2, 2.5, 2.1, 3.2)), ylab="Abundance", ylim=c(0,4))
plot( c(0.1, NA, NA, 0.02, NA, 0.2, 0.1, 0.01, 0.05, 0.2), ylab="Abundance", ylim=c(0,4), xaxt="n")
mtext(1,paste("Condition", rep(1:2, each=5), "\nreplicate", rep(1:5,each=2)))
plot( c(0.1, NA, NA, 0.02, NA, 0.2, 0.1, 0.01, 0.05, 0.2), ylab="Abundance", ylim=c(0,4), xaxt="n",xlab="",
pch=13, col=rep(c("#337733","#773333"),each=5))
plot( c(0.1, NA, NA, 0.02, NA, 0.2, 0.1, 0.01, 0.05, 0.2), ylab="Abundance", ylim=c(0,4), xaxt="n",xlab="",
pch=15, col=rep(c("#337733","#773333"),each=5))
par(mfrow=c(1,2))
plot( c(0.1, NA, NA, 0.02, NA, 0.2, 0.1, 0.01, 0.05, 0.2), ylab="Abundance", ylim=c(0,4), xaxt="n",xlab="",
pch=15, col=rep(c("#337733","#773333"),each=5))
plot( c(0.1, NA, NA, 0.02, NA, 0.5, 1.2, 2.5, 2.1, 3.2), ylab="Abundance", ylim=c(0,4), xaxt="n",xlab="",
pch=15, col=rep(c("#337733","#773333"),each=5))
par(mfrow=c(1,2))
plot( c(0.1, NA, NA, 0.02, NA, 0.2, 0.1, 0.01, 0.05, 0.2), ylab="Abundance", ylim=c(0,4), xaxt="n",xlab="",
pch=15, col=rep(c("#337733","#773333"),each=5))
plot( c(0.1, NA, NA, 0.02, NA, 3.5, 1.2, 2.5, 2.1, 3.2), ylab="Abundance", ylim=c(0,4), xaxt="n",xlab="",
pch=15, col=rep(c("#337733","#773333"),each=5))
par(mfrow=c(1,2))
plot( c(0.1, NA, NA, 0.02, NA, 0.2, 0.1, 0.01, 0.05, 0.2), ylab="Abundance", ylim=c(0,4), xaxt="n",xlab="",
pch=15, col=rep(c("#337733","#773333"),each=5))
plot( c(0.1, NA, NA, 0.02, NA, 2.5, 2.7, 2.5, 2.1, 3.2), ylab="Abundance", ylim=c(0,4), xaxt="n",xlab="",
pch=15, col=rep(c("#337733","#773333"),each=5))
############ Command-line wrapper for VSClust
#### Input parameters #####
# All principal parameters for running VSClust can be defined as in the shiny app at computproteomics.bmb.sdu.dk/Apps/VSClust
Experiment <- "ProtExample" ## name of study
NumReps <- 3###886 ## Number of replicates per
NumCond <- 4###12 ## Number of different experimental conditions (e.g. time points)
isPaired <- F ## Paired or unpaired statistical tests
isStat <- T ## Set to F when no replicates but additional columns with individual standard deviations
infile <- 'ProtExample.csv'##"/path/MyData.csv" ## Input filename
protnames <- F ## Low-level data (e.g. probes of transcripts or peptides)
is_header <- T ## File contains one-line header
cores <- 4#4 # Number of cores to use ## 1 is for windows
PreSetNumClustVSClust <- 0 # If 0, then automatically take the one from Minimum Centroid Distance
PreSetNumClustStand <- 0 # If 0, then automatically take the one from Minimum Centroid Distance
maxClust <- 20 ## max. number of clusters when estimating the number of clusters
## packages
library(matrixStats)
library(Mfuzz)
library(limma)
library(qvalue)
## HAS TO BE THE MODIFIED ONE!
require(e1071FuzzVec)
library(shiny)
library(clusterProfiler)
library(RDAVIDWebService)
source("FcmClustPEst.R")
source("mfuzz.plotpdf.R")
source("HelperFuncs.R")
#### File readin
dat <- read.csv(infile,row.names=1,header=is_header)
dat <- dat[rownames(dat)!="",]
proteins <- NULL
if(protnames) {
proteins <- dat[,1]
dat <- dat[,2:ncol(dat)]
names(proteins) <- rownames(dat)
}
#### running statistical analysis and estimation of individual variances
statOut <- statWrapper(dat, NumReps, NumCond, isPaired, isStat)
dat <- statOut$dat
Sds <- dat[,ncol(dat)]
print(paste("Features:",nrow(dat),"<br/>Missing values:",
sum(is.na(dat)),"<br/>Median standard deviations:",
round(median(Sds,na.rm=T),digits=3)))
## Write output into file
write.csv(statOut$statFileOut,paste("",Experiment,"statFileOut.csv",sep=""))
#### Estimate number of clusters with maxClust as maximum number clusters to test for
clustNumOut <- estimClustNum(dat, maxClust, cores)
#### Use estimate cluster number or use own
if (PreSetNumClustVSClust == 0)
PreSetNumClustVSClust <- clustNumOut$numclust
if (PreSetNumClustStand == 0)
PreSetNumClustStand <- clustNumOut$numclust
print(clustNumOut$p)
print(clustNumOut$p)
names(clustNumOut)
clustNumOut$p
dev.off89
dev.off()
clustNumOut$p
source('~/devel/Bioinformatics/DataAnalysis/ShinyApps/VSClustTmp/runVSClust.R')
print(clustNumOut$p)
#### Run clustering (VSClust and standard fcm clustering
ClustOut <- runClustWrapper(dat, PreSetNumClustVSClust, proteins, VSClust=T, cores)
Bestcl <- ClustOut$Bestcl
ClustOut$p
## Write pdf-figure of clusters
pdf(paste(Experiment,"FCMVarMResults", Sys.Date(), ".pdf", sep=""),height=5*round(sqrt(PreSetNumClustVSClust)),width=5*ceiling(sqrt(PreSetNumClustVSClust)))
print(ClustOut$p)
dev.off()
print(ClustOut$ClustInd)
