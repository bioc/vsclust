mu<-p*(1-1/NClust)+1/(NClust)
m<- 1+ 2*log(di/dt)/log((1-mu)/mu/(NClust-1))
m[m<1] <- NA
m[m==Inf]<-0
m[m==0]<-NA
m[is.na(m)]<-mm*10
m<-rowMaxs(cbind(m,mm,na.rm=T))
if (m[which.max(Sds)]== mm)
m[1:length(m)] <- mm
# plot(Sds,m)
# plot(Sds,p)
lines(Sds,p,col=topo.colors(20)[NClust],type="b",pch=16,cex=D/10)
# lines(Sds,m,col=topo.colors(20)[NClust],type="b",pch=16,cex=D/10)
Ms <- rbind(Ms,cbind(D,NClust,Sds,m,p))
}
}
colnames(Ms) <- c("D","Clusters","Sds","m","p")
# levelplot(p~NClust+Sds,data=as.data.frame(Ms[1:808,]))
pdf("pdistr.pdf")
library(matrixStats)
library(lattice)
D<-10
R <- 10000
NClust <- 4
Sds <- seq(0.0,3,0.01)
plot(Sds,rep(-1,length(Sds)),ylim=c(0,0.21),xlab="standard deviation",ylab="p")
# plot(Sds,rep(-1,length(Sds)),ylim=c(1,1000),log="y")
Ms <- NULL
for(D in c(3:10)) {
for (NClust in c(3,5,10)) {
mm <- 1 + (1418/R + 22.05)* D^(-2) + (12.33/R + 0.243)*D^(-0.0406*log(R)-0.1134)
### d_i and d_t
difunc <- function (c,D) { a<-0; for (i in 0:c) { a<- a+ choose(c,i)*(-1)^(i)/(1+i*D)}; a;}
di <- difunc(NClust,D)
dt <- (NClust)^(-1/D)
p <- dnorm(di,0,Sds) * (1-dnorm(dt,0,Sds))^(NClust-1)
mu<-p*(1-1/NClust)+1/(NClust)
m<- 1+ 2*log(di/dt)/log((1-mu)/mu/(NClust-1))
m[m<1] <- NA
m[m==Inf]<-0
m[m==0]<-NA
m[is.na(m)]<-mm*10
m<-rowMaxs(cbind(m,mm,na.rm=T))
if (m[which.max(Sds)]== mm)
m[1:length(m)] <- mm
# plot(Sds,m)
# plot(Sds,p)
lines(Sds,p,col=topo.colors(20)[NClust],type="b",pch=16,cex=D/10)
# lines(Sds,m,col=topo.colors(20)[NClust],type="b",pch=16,cex=D/10)
Ms <- rbind(Ms,cbind(D,NClust,Sds,m,p))
}
}
colnames(Ms) <- c("D","Clusters","Sds","m","p")
# levelplot(p~NClust+Sds,data=as.data.frame(Ms[1:808,]))
dev.off()
getwd()
library(matrixStats)
library(lattice)
D<-10
R <- 10000
NClust <- 4
Sds <- seq(0.0,3,0.01)
# plot(Sds,rep(-1,length(Sds)),ylim=c(0,0.21),xlab="standard deviation",ylab="p")
plot(Sds,rep(-1,length(Sds)),ylim=c(1,1000),log="y")
Ms <- NULL
for(D in c(3:10)) {
for (NClust in c(3,5,10)) {
mm <- 1 + (1418/R + 22.05)* D^(-2) + (12.33/R + 0.243)*D^(-0.0406*log(R)-0.1134)
### d_i and d_t
difunc <- function (c,D) { a<-0; for (i in 0:c) { a<- a+ choose(c,i)*(-1)^(i)/(1+i*D)}; a;}
di <- difunc(NClust,D)
dt <- (NClust)^(-1/D)
p <- dnorm(di,0,Sds) * (1-dnorm(dt,0,Sds))^(NClust-1)
mu<-p*(1-1/NClust)+1/(NClust)
m<- 1+ 2*log(di/dt)/log((1-mu)/mu/(NClust-1))
m[m<1] <- NA
m[m==Inf]<-0
m[m==0]<-NA
m[is.na(m)]<-mm*10
m<-rowMaxs(cbind(m,mm,na.rm=T))
if (m[which.max(Sds)]== mm)
m[1:length(m)] <- mm
# plot(Sds,m)
# plot(Sds,p)
# lines(Sds,p,col=topo.colors(20)[NClust],type="b",pch=16,cex=D/10)
lines(Sds,m,col=topo.colors(20)[NClust],type="b",pch=16,cex=D/10)
Ms <- rbind(Ms,cbind(D,NClust,Sds,m,p))
}
}
colnames(Ms) <- c("D","Clusters","Sds","m","p")
# levelplot(p~NClust+Sds,data=as.data.frame(Ms[1:808,]))
y1 <- data.frame(score=rnorm(input$samplesize,0,1))
y2 <- data.frame(score=rnorm(input$samplesize,0,1)+input$qual*abs(rnorm(input$samplesize,1,1)))
y1$database <- "decoy"
y2$database <- "target"
y <- rbind(y1,y2)
gg <- ggplot(y, aes(x=score, fill=database)) + geom_histogram(alpha = 0.5, aes(y = ..count..),binwidth=0.5, position = 'identity')
c1 <- ecdf(y1[,1])
c2 <- ecdf(y2[,1])
rang <- seq(min(y1[,1]),max(y1[,1]),length.out=500)
thresh <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.01))]
y1 <- data.frame(score=rnorm(input$samplesize,0,1))
y2 <- data.frame(score=rnorm(input$samplesize,0,1)+input$qual*abs(rnorm(input$samplesize,1,1)))
y1$database <- "decoy"
y2$database <- "target"
y <- rbind(y1,y2)
gg <- ggplot(y, aes(x=score, fill=database)) + geom_histogram(alpha = 0.5, aes(y = ..count..),binwidth=0.5, position = 'identity')
c1 <- ecdf(y1[,1])
c2 <- ecdf(y2[,1])
rang <- seq(min(y1[,1]),max(y1[,1]),length.out=500)
thresh <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.01))]
y1 <- data.frame(score=rnorm(input$samplesize,0,1))
input <- list()
input$samplesize <- 1000
input$qual <- 50
y1 <- data.frame(score=rnorm(input$samplesize,0,1))
y2 <- data.frame(score=rnorm(input$samplesize,0,1)+input$qual*abs(rnorm(input$samplesize,1,1)))
y1$database <- "decoy"
y2$database <- "target"
y <- rbind(y1,y2)
gg <- ggplot(y, aes(x=score, fill=database)) + geom_histogram(alpha = 0.5, aes(y = ..count..),binwidth=0.5, position = 'identity')
library(ggplot2)
y1 <- data.frame(score=rnorm(input$samplesize,0,1))
y2 <- data.frame(score=rnorm(input$samplesize,0,1)+input$qual/100*abs(rnorm(input$samplesize,1,1)))
y1$database <- "decoy"
y2$database <- "target"
y <- rbind(y1,y2)
gg <- ggplot(y, aes(x=score, fill=database)) + geom_histogram(alpha = 0.5, aes(y = ..count..),binwidth=0.5, position = 'identity')
c1 <- ecdf(y1[,1])
c2 <- ecdf(y2[,1])
rang <- seq(min(y1[,1]),max(y1[,1]),length.out=500)
thresh <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.01))]
gg <- gg + geom_vline(xintercept=thresh) + geom_text(aes(x=thresh,y=input$samplesize/10,label="FDR 0.01"),hjust=0,vjust=1)
thresh2 <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.001))]
gg <- gg + geom_vline(xintercept=thresh2,colour=2) + geom_text(aes(x=thresh2,y=input$samplesize/20,label="FDR 0.001"),colour=2,hjust=0,vjust=0)
print(gg)
thresh <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.01))]
gg <- gg + geom_vline(xintercept=thresh) + geom_text(aes(x=thresh,y=input$samplesize/10,label="FDR 0.01"),hjust=0,vjust=1)
thresh2 <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.001))]
gg <- gg + geom_vline(xintercept=thresh2,colour=2) + geom_text(aes(x=thresh2,y=input$samplesize/20,label="FDR 0.001"),colour=2,hjust=0,vjust=0)
print(gg)
thresh
y1 <- data.frame(score=rnorm(input$samplesize,0,1))
y2 <- data.frame(score=rnorm(input$samplesize,0,1)+input$qual/10*abs(rnorm(input$samplesize,1,1)))
y1$database <- "decoy"
y2$database <- "target"
y <- rbind(y1,y2)
gg <- ggplot(y, aes(x=score, fill=database),environment=environment()) + geom_histogram(alpha = 0.5, aes(y = ..count..),binwidth=0.5, position = 'identity')
c1 <- ecdf(y1[,1])
c2 <- ecdf(y2[,1])
rang <- seq(min(y1[,1]),max(y1[,1]),length.out=200)
thresh1 <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.01))]
gg <- gg + geom_vline(xintercept=thresh1) + geom_text(aes(x=thresh1,y=input$samplesize/10,label="FDR 0.01"),hjust=0,vjust=1)
thresh2 <- rang[which.min(abs((1-c1(rang))/(1-c2(rang))-0.001))]
gg <- gg + geom_vline(xintercept=thresh2,colour=2) + geom_text(aes(x=thresh2,y=input$samplesize/20,label="FDR 0.001"),colour=2,hjust=0,vjust=0)
print(gg)
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
?renderPlot
?plotOutput
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
?renderPlot
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/LimmaRP')
library(shiny)
shiny::runApp('/srv/shiny-server/shiny-demos/linreg')
shiny::runApp('/srv/shiny-server/shiny-demos/poisreg')
shiny::runApp('/srv/shiny-server/shiny-demos/poisreg')
plot(dnorm,xlim=c(-2,2)
)
plot(dnorm,xlim=c(-4,4))
plot(dnorm,xlim=c(-4,4),xlab="Normal distribution")
abline(v=sd(-1,1),col=2)
abline(v=0,col=3)
text(-2,0.2,"standard deviation",col=2)
text(-0.5,0.2,"mean",col=3)
plot(dnorm,xlim=c(-4,4),xlab="Normal distribution")
abline(v=c(-1,1),col=2)
abline(v=0,col=3)
text(-2,0.2,"standard deviation",col=2)
text(-0.5,0.2,"mean",col=3)
text(-0.5,0.3,"mean",col=3)
plot(dnorm,xlim=c(-4,4),xlab="Normal distribution")
abline(v=c(-1,1),col=2)
abline(v=0,col=3)
text(-1.5,0.2,"standard\ndeviation",col=2)
text(-0.5,0.3,"mean",col=3)
text(-1.7,0.2,"standard\ndeviation",col=2)
plot(dnorm,xlim=c(-4,4),xlab="Normal distribution")
abline(v=c(-1,1),col=2)
abline(v=0,col=3)
text(-1.7,0.2,"standard\ndeviation",col=2)
text(-0.5,0.25,"mean",col=3)
plot(dnorm,xlim=c(-4,4),xlab="Normal distribution")
plot(dnorm,xlim=c(-4,4),ylab="Normal distribution")
abline(v=c(-1,1),col=2)
abline(v=0,col=3)
text(-1.7,0.2,"standard\ndeviation",col=2)
text(-0.5,0.25,"mean",col=3)
sd(dlnorm)
plot(dlnorm,xlim=c(0,10),ylab="Log-normal distribution")
abline(v=exp(0.5),col=2)
mean(rlnorm(100))
mean(rlnorm(1000))
mean(rlnorm(10000))
exp(0.5)
abline(v=sqrt((exp(0.5)-1)*exp(0.5)),col=2)
abline(v=exp(0.5),col=3)
legend("upper right",legend=c("mean","standard\ndeviation",col=c(3,2))
)
legend("upper right",legend=c("mean","standard\ndeviation"),col=c(3,2))
legend("topright",legend=c("mean","standard\ndeviation"),col=c(3,2))
legend("topright",legend=c("mean","standard\ndeviation"),col=c(3,2),lty=1)
plot(dlnorm,xlim=c(0,10),ylab="Log-normal distribution")
abline(v=exp(0.5)+c(-1,1)*sqrt((exp(0.5)-1)*exp(0.5)),col=2)
abline(v=exp(0.5),col=3)
plot(dnorm,xlim=c(-4,4),ylab="Normal distribution")
abline(v=c(-1,1),col=2)
abline(v=0,col=3)
legend("topright",legend=c("mean","standard\ndeviation"),col=c(3,2),lty=1)
plot(dlnorm,xlim=c(0,10),ylab="Log-normal distribution")
abline(v=exp(0.5)+c(-1,1)*sqrt((exp(0.5)-1)*exp(0.5)),col=2)
abline(v=exp(0.5),col=3)
legend("topright",legend=c("mean","standard\ndeviation"),col=c(3,2),lty=1)
plot(dpois,xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois,1,xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois,lambda=1,xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois(,lambda=1),,xlim=c(0,10),ylab="Log-normal distribution")
x <- seq(0,4,0.01)
plot(dpois(x,lambda=1),xlim=c(0,10),ylab="Log-normal distribution")
x <- seq(0,4,0.01)
plot(dpois(x,lambda=4),xlim=c(0,10),ylab="Log-normal distribution")
x <- seq(0,1,0.01)
plot(dpois(x,lambda=4),xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois(x,lambda=0.5),xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois(x,lambda=100),xlim=c(0,10),ylab="Log-normal distribution")
x <- seq(0,100,1)
plot(dpois(x,lambda=100),xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois(x,lambda=0.01),xlim=c(0,10),ylab="Log-normal distribution")
plot(dpois(x,lambda=12),xlim=c(0,10),ylab="Log-normal distribution")
plot(x,dpois(x,lambda=12),xlim=c(0,10),ylab="Log-normal distribution")
plot(x,dpois(x,lambda=2),xlim=c(0,10),ylab="Log-normal distribution")
x <- seq(0,100,0.1)
plot(x,dpois(x,lambda=2),xlim=c(0,10),ylab="Log-normal distribution")
x <- seq(0,100,1)
plot(x,dpois(x,lambda=2),xlim=c(0,10),ylab="Log-normal distribution")
plot(x,dpois(x,lambda=3),xlim=c(0,10),ylab="Log-normal distribution")
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="s",ylab="Log-normal distribution")
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="h",ylab="Log-normal distribution")
x <- seq(0,100,1)
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="h",ylab="Poisson distribution")
abline(v=sqrt(3),col=2)
abline(v=3,col=3)
legend("topright",legend=c("mean","standard\ndeviation"),col=c(3,2),lty=1)
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="h",ylab="Poisson distribution")
abline(v=sqrt(3),col=2)
abline(v=c(0,6),col=3)
abline(v=3+c(-1,1)*sqrt(3),col=2)
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="h",ylab="Poisson distribution")
abline(v=3+c(-1,1)*sqrt(3),col=2)
abline(v=3,col=3)
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="h",ylab="Poisson distribution",lwd=2)
abline(v=3+c(-1,1)*sqrt(3),col=2)
abline(v=3,col=3)
plot(x,dpois(x,lambda=3),xlim=c(0,10),type="h",ylab="Poisson distribution",lwd=3)
abline(v=3+c(-1,1)*sqrt(3),col=2)
abline(v=3,col=3)
legend("topright",legend=c("mean","standard\ndeviation"),col=c(3,2),lty=1)
plot(dbinom,xlim=c(0,10),ylab="Binomial distribution")
plot(dbinom(x,2),xlim=c(0,10),ylab="Binomial distribution")
plot(dbinom(x,0.7,20),xlim=c(0,10),ylab="Binomial distribution")
plot(x,dbinom(x,0.7,20),xlim=c(0,10),ylab="Binomial distribution")
?dbinom
plot(x,dbinom(x,20,0.7),xlim=c(0,10),ylab="Binomial distribution")
plot(x,dbinom(x,10,0.7),xlim=c(0,10),ylab="Binomial distribution")
x <- seq(0,100,0.1)
plot(x,dbinom(x,10,0.7),xlim=c(0,10),ylab="Binomial distribution")
x <- seq(0,100,1)
plot(x,dbinom(x,10,0.7),xlim=c(0,10),ylab="Binomial distribution")
plot(x,dbinom(x,10,0.7),xlim=c(0,12),ylab="Binomial distribution")
plot(x,dbinom(x,10,0.7),xlim=c(0,12),ylab="Binomial distribution",lwd=3,type="h")
abline(v=7,col=3)
abline(v=7+c(-1,1)*sqrt(7*0.3),col=2)
plot(runif,xlim=c(0,12),ylab="Binomial distribution",lwd=3,type="h")
plot(dunif,xlim=c(0,12),ylab="Binomial distribution",lwd=3,type="h")
plot(dunif,xlim=c(0,12),ylab="Binomial distribution")
plot(dunif,xlim=c(-1.5,1.5),ylab="Binomial distribution")
plot(dunif,xlim=c(-0.5,1.5),ylab="Binomial distribution")
abline(v=0.5+c(-1,1)/12,col=2)
abline(v=0.5,col=3)
sd(runif(1000))
sd(runif(10000))
sd(runif(10000))*12
sd(runif(10000))*sqrt(12)
abline(v=0.5+c(-1,1)/sqrt(12),col=2)
library(clusterProfiler)
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/FuzzyCMeansVarM')
library(rJava)
david <- DAVIDWebService$new(email = david.user,url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
library(RDAVIDWebService)
david <- DAVIDWebService$new(email = david.user,url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = veits@bmb.sdu.dk,url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
david <- DAVIDWebService$new(email = "veits@bmb.sdu.dk",url="https://david.ncifcrf.gov/webservice/services/DAVIDWebService.DAVIDWebServiceHttpSoap12Endpoint/")
library(venneuler)
shiny::runApp('devel/Proteomics/DataAnalysis/ShinyApps/FuzzyCMeansVarM')
A <- read.csv("/tmp/01_Input_Filtered_data_Quantifiable_limma.csv")
head(A)
dim(A[complete.cases(A),])
t(A[complete.cases(A),]))
t(A[complete.cases(A),])
nrow(t(A[complete.cases(A),]))
ncol(t(A[complete.cases(A),]))
runApp('devel/Proteomics/DataAnalysis/ShinyApps/FuzzyCMeansVarMdev')
A <- read.csv("/tmp/test.csv")
names(A)
plot(r_u~ Accs + Pep, data=A)
plot(r_u~ Accs + Pep, data=A,las=2)
plot(r_u~ Accs + Pep, data=A)
plot(log(r_u)~ Accs + Pep, data=A)
plot(log(r_m)~ Accs + Pep, data=A)
plot(log(r_)~ Accs + Pep, data=A)
plot(log(r_)~ Accs + Pep, data=A)
plot(log(r)~ Accs + Pep, data=A)
library(e1071)
cmeans
library(e1071FuzzVec)
require(e1071FuzzVec)
setwd("~/devel/Proteomics/DataAnalysis/ShinyApps/VSClustTmp")
require(e1071FuzzVec)
require("e1071FuzzVec")
require(e1071FuzzVec)
require(e1071FuzzVec)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
withProgress(message="Calculating ...", min=3,max=maxClust, value=2,  {
for (NClust in 3:maxClust) {
print(paste("Running cluster number", NClust))
incProgress(1, detail = paste("Running cluster number",NClust))
clustout <- ClustComp(dat[,1:(ncol(dat)-1)],NClust=NClust,Sds=dat[,ncol(dat)],NSs=8, cores)
ClustInd[NClust,]<-c(clustout$indices,sum(rowMaxs(clustout$Bestcl$membership)>0.5),
sum(rowMaxs(clustout$Bestcl2$membership)>0.5))
}
})
runApp()
runApp()
runApp()
runApp()
setwd("/data/DNA_meth_data_cancer")
Experiment <- "DNAMeth" ## name of study
NumReps <- 886 ## Number of replicates per
NumCond <- 12 ## Number of different experimental conditions (e.g. time points)
isPaired <- F ## Paired or unpaired statistical tests
isStat <- T ## Set to F when no replicates but additional columns with individual standard deviations
infile <- "CutCancerSetFull.csv" ## Input filename
protnames <- F ## Low-level data (e.g. probes of transcripts or peptides)
is_header <- T ## File contains one-line header
cores <- 8 # Number of corse to use
df
gf()
PreSetNumClustVSClust <- 0 # If 0, then automatically take the one from Minimum Centroid Distance
PreSetNumClustStand <- 0 # If 0, then automatically take the one from Minimum Centroid Distance
maxClust <- 25 ## max. number of clusters when estimating the number of clusters
## packages
library(matrixStats)
library(Mfuzz)
library(limma)
library(qvalue)
## HAS TO BE THE MODIFIED ONE!
require(e1071FuzzVec)
library(shiny)
library(clusterProfiler)
library(RDAVIDWebService)
source("FcmClustPEst.R")
source("mfuzz.plotpdf.R")
source("HelperFuncs.R")
setwd("~/devel/Proteomics/DataAnalysis/ShinyApps/VSClustTmp")
put parameters #####
Experiment <- "DNAMeth" ## name of study
NumReps <- 886 ## Number of replicates per
NumCond <- 12 ## Number of different experimental conditions (e.g. time points)
isPaired <- F ## Paired or unpaired statistical tests
isStat <- T ## Set to F when no replicates but additional columns with individual standard deviations
infile <- "/data/DNA_meth_data_cancer/CutCancerSetFull.csv" ## Input filename
protnames <- F ## Low-level data (e.g. probes of transcripts or peptides)
is_header <- T ## File contains one-line header
cores <- 8 # Number of corse to use
PreSetNumClustVSClust <- 0 # If 0, then automatically take the one from Minimum Centroid Distance
PreSetNumClustStand <- 0 # If 0, then automatically take the one from Minimum Centroid Distance
maxClust <- 25 ## max. number of clusters when estimating the number of clusters
## packages
library(matrixStats)
library(Mfuzz)
library(limma)
library(qvalue)
## HAS TO BE THE MODIFIED ONE!
require(e1071FuzzVec)
library(shiny)
library(clusterProfiler)
library(RDAVIDWebService)
source("FcmClustPEst.R")
source("mfuzz.plotpdf.R")
source("HelperFuncs.R")
#### File readin
dat <- read.csv(infile,row.names=1,header=input$is_header)
dat <- dat[rownames(dat)!="",]
proteins <- NULL
if(protnames) {
proteins <- dat[,1]
dat <- dat[,2:ncol(dat)]
names(proteins) <- rownames(dat)
}
dat <- read.csv(infile,row.names=1,header=is_header)
dat <- dat[rownames(dat)!="",]
proteins <- NULL
if(protnames) {
proteins <- dat[,1]
dat <- dat[,2:ncol(dat)]
names(proteins) <- rownames(dat)
}
statOut <- statWrapper(dat, NumReps, NumCond, isPaired, isStat)
dat <- statOut$dat
Sds <- dat[,ncol(dat)]
print(paste("Features:",nrow(dat),"<br/>Missing values:",
sum(is.na(v$dat)),"<br/>Median standard deviations:",
round(median(Sds,na.rm=T),digits=3)))
write.csv(statOut$statFileOut,paste(Experiment,"statFileOut.csv",sep=""))
clustNumOut <- estimClustNum(dat, maxClust, cores)
if (PreSetNumClustVSClust == 0)
PreSetNumClustVSClust <- clustNumOut$numclust
if (PreSetNumClustStand == 0)
PreSetNumClustStand <- clustNumOut$numclust
############ Command-line wrapper for VSClust
#### Input parameters #####
Experiment <- "DNAMeth" ## name of study
NumReps <- 886 ## Number of replicates per
NumCond <- 12 ## Number of different experimental conditions (e.g. time points)
isPaired <- F ## Paired or unpaired statistical tests
isStat <- F ## Set to F when no replicates but additional columns with individual standard deviations
infile <- "/data/DNA_meth_data_cancer/CutCancerSetFull.csv" ## Input filename
protnames <- F ## Low-level data (e.g. probes of transcripts or peptides)
is_header <- T ## File contains one-line header
cores <- 8 # Number of corse to use
PreSetNumClustVSClust <- 0 # If 0, then automatically take the one from Minimum Centroid Distance
PreSetNumClustStand <- 0 # If 0, then automatically take the one from Minimum Centroid Distance
maxClust <- 25 ## max. number of clusters when estimating the number of clusters
## packages
library(matrixStats)
library(Mfuzz)
library(limma)
library(qvalue)
## HAS TO BE THE MODIFIED ONE!
require(e1071FuzzVec)
library(shiny)
library(clusterProfiler)
library(RDAVIDWebService)
source("FcmClustPEst.R")
source("mfuzz.plotpdf.R")
source("HelperFuncs.R")
#### File readin
dat <- read.csv(infile,row.names=1,header=is_header)
dat <- dat[rownames(dat)!="",]
proteins <- NULL
if(protnames) {
proteins <- dat[,1]
dat <- dat[,2:ncol(dat)]
names(proteins) <- rownames(dat)
}
statOut <- statWrapper(dat, NumReps, NumCond, isPaired, isStat)
dat <- statOut$dat
Sds <- dat[,ncol(dat)]
print(paste("Features:",nrow(dat),"<br/>Missing values:",
sum(is.na(dat)),"<br/>Median standard deviations:",
round(median(Sds,na.rm=T),digits=3)))
write.csv(statOut$statFileOut,paste(Experiment,"statFileOut.csv",sep=""))
clustNumOut <- estimClustNum(dat, maxClust, cores)
if (PreSetNumClustVSClust == 0)
PreSetNumClustVSClust <- clustNumOut$numclust
if (PreSetNumClustStand == 0)
PreSetNumClustStand <- clustNumOut$numclust
pdf(paste(Experiment,"EstimatedClustNumber.pdf", sep=""),height=6,width=15)
print(clustNumOut$p)
dev.off()
ClustOut <- runClustWrapper(pars$dat, PreSetNumClustVSClut, pars$proteins, VSClust=T, cores)
Bestcl <- ClustOut$Bestcl
ClustOut$p
write.csv(data.frame(cluster=Bestcl$cluster,ClustOut$outFileClust,isClusterMember=rowMaxs(Bestcl$membership)>0.5,maxMembership=rowMaxs(Bestcl$membership),
clustNumOut <- estimClustNum(dat, maxClust, cores)
clustNumOut <- estimClustNum(dat, maxClust, cores)
